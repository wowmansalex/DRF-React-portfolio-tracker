{"ast":null,"code":"import { createSlice, createAsyncThunk, createReducer } from '@reduxjs/toolkit';\nimport api from '../constants/api';\nimport { PORTFOLIO, ASSET, TRANSACTION, LOG_DATA } from './constants/endpoints';\nexport const fetchPortfolio = createAsyncThunk('portfolio/fetchPortfolio', async (arg, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const response = await api.get(PORTFOLIO);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      console.log(error.message);\n      return rejectWithValue(error.response.data.message);\n    } else {\n      console.log('source: fetchPortfolio:' + error.message);\n      return rejectWithValue(error.message);\n    }\n  }\n});\nexport const fetchAssets = createAsyncThunk('assets/fetchAssets', async (arg, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    const response = await api.get(ASSET);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});\nexport const fetchTransactions = createAsyncThunk('transactions/fetchTransactions', async _ref3 => {\n  let {\n    rejectWithValue\n  } = _ref3;\n\n  try {\n    const response = await api.get(TRANSACTION);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});\nexport const fetchTransactionByAsset = createAsyncThunk('transactions/fetchTransactiopnsByAsset', async (coin, _ref4) => {\n  let {\n    rejectWithValue\n  } = _ref4;\n\n  try {\n    const response = await api.get(TRANSACTION + `${coin}`);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});\nexport const createNewTransaction = createAsyncThunk('transactions/createNewTransaction', async (data, _ref5) => {\n  let {\n    rejectWithValue\n  } = _ref5;\n\n  try {\n    const response = await api.post('/api/transaction/', data);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});\nconst initialState = {\n  id: 0,\n  portfolio_name: '',\n  balance: 0,\n  assets: [],\n  trannsactions: [],\n  balance: 0,\n  isLoading: false,\n  error: ''\n};\nconst portfolioSlice = createSlice({\n  name: 'portfolio',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchPortfolio.pending]: state => {\n      console.log('fetch portfolio pending');\n      state.isLoading = true;\n    },\n    [fetchPortfolio.fulfilled]: (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      console.log('fetch portfolio fulfilled');\n      state.isLoading = false;\n      state.balance = payload.balance;\n      state.id = payload.id;\n    },\n    [fetchPortfolio.rejected]: (state, _ref7) => {\n      let {\n        payload\n      } = _ref7;\n      console.log('fetch portfolio rejected');\n      state.isLoading = false;\n      state.error = payload;\n    },\n    [fetchAssets.pending]: state => {\n      console.log('fetch assets pending');\n      state.isLoading = true;\n    },\n    [fetchAssets.fulfilled]: (state, _ref8) => {\n      let {\n        payload\n      } = _ref8;\n      console.log('fetch assets fulfilled');\n      state.isLoading = false;\n      state.assets = payload;\n    },\n    [fetchAssets.rejected]: () => {\n      console.log('fetch assets rejected');\n    },\n    [fetchTransactions.pending]: () => {\n      console.log('fetching transaction pending');\n    },\n    [fetchTransactions.fulfilled]: (state, _ref9) => {\n      let {\n        payload\n      } = _ref9;\n      console.log('fetch transaction fulfilled');\n      return { ...state,\n        transactions: payload\n      };\n    },\n    [fetchTransactions.rejected]: () => {\n      console.log('fetch transaction rejected');\n    },\n    [createNewTransaction.pending]: () => {\n      console.log('creating transaction pending');\n    },\n    [createNewTransaction.fulfilled]: (state, _ref10) => {\n      let {\n        payload\n      } = _ref10;\n      console.log(payload, 'creating transaction fulfilled');\n      state.transactions.push(payload);\n    },\n    [createNewTransaction.rejected]: () => {\n      console.log('creating transaction rejected');\n    },\n    [fetchTransactionByAsset.pending]: () => {\n      console.log('fetching transaction by asset pending');\n    },\n    [fetchTransactionByAsset.fulfilled]: (state, _ref11) => {\n      let {\n        payload\n      } = _ref11;\n      console.log('fetch transaction by asset fulfilled');\n      return { ...state,\n        transactions: payload\n      };\n    },\n    [fetchTransactionByAsset.rejected]: () => {\n      console.log('fetch transaction by asset rejected');\n    }\n  }\n});\nexport const {} = portfolioSlice.actions;\nexport default portfolioSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","createReducer","api","PORTFOLIO","ASSET","TRANSACTION","LOG_DATA","fetchPortfolio","arg","rejectWithValue","response","get","console","log","data","error","message","fetchAssets","fetchTransactions","fetchTransactionByAsset","coin","createNewTransaction","post","initialState","id","portfolio_name","balance","assets","trannsactions","isLoading","portfolioSlice","name","reducers","extraReducers","pending","state","fulfilled","payload","rejected","transactions","push","actions","reducer"],"sources":["/Users/awaumans/Desktop/coding/python/django-react-portfolio-v2/frontend/src/features/portfolio/portfolioSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk, createReducer } from '@reduxjs/toolkit';\n\nimport api from '../constants/api';\nimport { PORTFOLIO, ASSET, TRANSACTION, LOG_DATA } from './constants/endpoints';\n\nexport const fetchPortfolio = createAsyncThunk(\n\t'portfolio/fetchPortfolio',\n\tasync (arg, { rejectWithValue }) => {\n\t\ttry {\n\t\t\tconst response = await api.get(PORTFOLIO);\n\t\t\tconsole.log(response.data);\n\t\t\treturn response.data;\n\t\t} catch (error) {\n\t\t\tif (error.response && error.response.data.message) {\n\t\t\t\tconsole.log(error.message);\n\t\t\t\treturn rejectWithValue(error.response.data.message);\n\t\t\t} else {\n\t\t\t\tconsole.log('source: fetchPortfolio:' + error.message);\n\t\t\t\treturn rejectWithValue(error.message);\n\t\t\t}\n\t\t}\n\t}\n);\n\nexport const fetchAssets = createAsyncThunk(\n\t'assets/fetchAssets',\n\tasync (arg, { rejectWithValue }) => {\n\t\ttry {\n\t\t\tconst response = await api.get(ASSET);\n\t\t\treturn response.data;\n\t\t} catch (error) {\n\t\t\tif (error.response && error.response.data.message) {\n\t\t\t\treturn rejectWithValue(error.response.data.message);\n\t\t\t} else {\n\t\t\t\treturn rejectWithValue(error.message);\n\t\t\t}\n\t\t}\n\t}\n);\n\nexport const fetchTransactions = createAsyncThunk(\n\t'transactions/fetchTransactions',\n\tasync ({ rejectWithValue }) => {\n\t\ttry {\n\t\t\tconst response = await api.get(TRANSACTION);\n\t\t\treturn response.data;\n\t\t} catch (error) {\n\t\t\tif (error.response && error.response.data.message) {\n\t\t\t\treturn rejectWithValue(error.response.data.message);\n\t\t\t} else {\n\t\t\t\treturn rejectWithValue(error.message);\n\t\t\t}\n\t\t}\n\t}\n);\n\nexport const fetchTransactionByAsset = createAsyncThunk(\n\t'transactions/fetchTransactiopnsByAsset',\n\tasync (coin, { rejectWithValue }) => {\n\t\ttry {\n\t\t\tconst response = await api.get(TRANSACTION + `${coin}`);\n\t\t\treturn response.data;\n\t\t} catch (error) {\n\t\t\tif (error.response && error.response.data.message) {\n\t\t\t\treturn rejectWithValue(error.response.data.message);\n\t\t\t} else {\n\t\t\t\treturn rejectWithValue(error.message);\n\t\t\t}\n\t\t}\n\t}\n);\n\nexport const createNewTransaction = createAsyncThunk(\n\t'transactions/createNewTransaction',\n\tasync (data, { rejectWithValue }) => {\n\t\ttry {\n\t\t\tconst response = await api.post('/api/transaction/', data);\n\t\t\treturn response.data;\n\t\t} catch (error) {\n\t\t\tif (error.response && error.response.data.message) {\n\t\t\t\treturn rejectWithValue(error.response.data.message);\n\t\t\t} else {\n\t\t\t\treturn rejectWithValue(error.message);\n\t\t\t}\n\t\t}\n\t}\n);\n\nconst initialState = {\n\tid: 0,\n\tportfolio_name: '',\n\tbalance: 0,\n\tassets: [],\n\ttrannsactions: [],\n\tbalance: 0,\n\tisLoading: false,\n\terror: '',\n};\n\nconst portfolioSlice = createSlice({\n\tname: 'portfolio',\n\tinitialState,\n\treducers: {},\n\textraReducers: {\n\t\t[fetchPortfolio.pending]: state => {\n\t\t\tconsole.log('fetch portfolio pending');\n\t\t\tstate.isLoading = true;\n\t\t},\n\t\t[fetchPortfolio.fulfilled]: (state, { payload }) => {\n\t\t\tconsole.log('fetch portfolio fulfilled');\n\t\t\tstate.isLoading = false;\n\t\t\tstate.balance = payload.balance;\n\t\t\tstate.id = payload.id;\n\t\t},\n\t\t[fetchPortfolio.rejected]: (state, { payload }) => {\n\t\t\tconsole.log('fetch portfolio rejected');\n\t\t\tstate.isLoading = false;\n\t\t\tstate.error = payload;\n\t\t},\n\t\t[fetchAssets.pending]: state => {\n\t\t\tconsole.log('fetch assets pending');\n\t\t\tstate.isLoading = true;\n\t\t},\n\t\t[fetchAssets.fulfilled]: (state, { payload }) => {\n\t\t\tconsole.log('fetch assets fulfilled');\n\t\t\tstate.isLoading = false;\n\t\t\tstate.assets = payload;\n\t\t},\n\t\t[fetchAssets.rejected]: () => {\n\t\t\tconsole.log('fetch assets rejected');\n\t\t},\n\t\t[fetchTransactions.pending]: () => {\n\t\t\tconsole.log('fetching transaction pending');\n\t\t},\n\t\t[fetchTransactions.fulfilled]: (state, { payload }) => {\n\t\t\tconsole.log('fetch transaction fulfilled');\n\t\t\treturn { ...state, transactions: payload };\n\t\t},\n\t\t[fetchTransactions.rejected]: () => {\n\t\t\tconsole.log('fetch transaction rejected');\n\t\t},\n\t\t[createNewTransaction.pending]: () => {\n\t\t\tconsole.log('creating transaction pending');\n\t\t},\n\t\t[createNewTransaction.fulfilled]: (state, { payload }) => {\n\t\t\tconsole.log(payload, 'creating transaction fulfilled');\n\t\t\tstate.transactions.push(payload);\n\t\t},\n\t\t[createNewTransaction.rejected]: () => {\n\t\t\tconsole.log('creating transaction rejected');\n\t\t},\n\t\t[fetchTransactionByAsset.pending]: () => {\n\t\t\tconsole.log('fetching transaction by asset pending');\n\t\t},\n\t\t[fetchTransactionByAsset.fulfilled]: (state, { payload }) => {\n\t\t\tconsole.log('fetch transaction by asset fulfilled');\n\t\t\treturn { ...state, transactions: payload };\n\t\t},\n\t\t[fetchTransactionByAsset.rejected]: () => {\n\t\t\tconsole.log('fetch transaction by asset rejected');\n\t\t},\n\t},\n});\n\nexport const {} = portfolioSlice.actions;\nexport default portfolioSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}